make_volcano(et.CABvsDMSO_toptags, 8, 300, "CAB vs DMSO")
make_volcano <- function(df, x, y, title){
upreg <- nrow(subset(df,logFC > 1 & FDR < 0.05))
downreg <- nrow(subset(df,logFC < (-1) & FDR < 0.05))
EnhancedVolcano(df,
lab = NA, #CABvsDMSO_df$Symbol,
selectLab=c("Nfe2l2"),
x = 'logFC',
y = 'FDR',
title = title,
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
) + theme(text=element_text(size=16,  family="Times")) +
geom_text(x=x, y=y, label= upreg, family='Times') +
geom_text(x=-x, y=y, label= downreg, family="Times") +
theme(axis.text.x = element_text(colour="black"), axis.text.y = element_text(colour="black"))
}
make_volcano <- function(df, x, y, title){
upreg <- nrow(subset(df,logFC > 1 & FDR < 0.05))
downreg <- nrow(subset(df,logFC < (-1) & FDR < 0.05))
EnhancedVolcano(df,
lab = NA, #CABvsDMSO_df$Symbol,
selectLab=c("Nfe2l2"),
x = 'logFC',
y = 'FDR',
title = title,
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
) + theme(text=element_text(size=16,  family="Times")) +
geom_text(x=x, y=y, label= upreg, family='Times') +
geom_text(x=-x, y=y, label= downreg, family="Times") +
theme(axis.text.x = element_text(colour="black"), axis.text.y = element_text(colour="black"))
}
# len 2, 20; cab 8, 300
# save at w 700px, h 600px
make_volcano(et.CABvsDMSO_toptags, 8, 300, "CAB vs DMSO")
EnhancedVolcano(CABvsDMSO_df,
lab = CABvsDMSO_df$Symbol,
selectLab=select_genes,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color,
# colAlpha = 0.9,
max.overlaps = Inf
)
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=select_genes,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color,
# colAlpha = 0.9,
max.overlaps = Inf
)
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=select_genes,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
# shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color,
# colAlpha = 0.9,
max.overlaps = Inf
)
p <- ggplot(data=et.CABvsDMSO_toptags, aes(x=logFC, y=-log10(PValue), col=cluster)) +
geom_point() +
theme_minimal() +
scale_color_manual(values = colors) +
theme(text=element_text(size=16,  family="Times")) +
theme(axis.text.x = element_text(colour="black"), axis.text.y = element_text(colour="black"))
# scale_fill_discrete(breaks=c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', 'NA'))
p
install.packages("plotly")
install.packages("plotly")
library(plotly)
fig <- plot_ly(data = et.CABvsDMSO_toptags, x = ~logFC, y = ~-log10(PValue))
fig
fig <- plot_ly(data = et.CABvsDMSO_toptags, x = ~logFC, y = ~-log10(PValue), color = ~cluster)
fig
fig <- plot_ly(data = et.CABvsDMSO_toptags, x = ~logFC, y = ~-log10(PValue), color = ~cluster, colors = ~colors)
fig
ggplotly(p)
fig <- plot_ly(data = et.CABvsDMSO_toptags, x = ~logFC, y = ~-log10(PValue), color = ~cluster, colors = ~colors, text = external_gene_name, mode=markers)
fig <- plot_ly(data = et.CABvsDMSO_toptags, x = ~logFC, y = ~-log10(PValue), color = ~cluster, colors = ~colors, text = ~Symbol, mode=markers)
fig <- plot_ly(data = et.CABvsDMSO_toptags, x = ~logFC, y = ~-log10(PValue), color = ~cluster, colors = ~colors, text = ~Symbol, mode='markers')
fig
View(cluster9go)
workdir <- '/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R'
setwd(workdir)
cluster_go_analyze <- function(filename){
# import cluster csv
cluster_path <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/cluster_csvs"
cluster <- read.csv(file.path(cluster_path, filename))
# get cluster number
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
# get list of ens genes from cluster
cluster_genes <- cluster$X
# get de info from toptags table for only genes in cluster
cluster_de <- et.CABvsDMSO_toptags[c(cluster_genes),]
# goseq
genes <- as.integer(p.adjust(cluster_de$PValue[cluster_de$logFC != 0], method = "BH") < .05)
names(genes) <- row.names(cluster_de[cluster_de$logFC != 0, ])
table(genes)
pwf <- nullp(genes, "rn4", "ensGene")
GO.wall <- goseq(pwf, "rn4", "ensGene", test.cats = c("GO:BP"))
head(GO.wall)
return(GO.wall)
}
cluster_files <- list.files(cluster_path)
cluster1go <- cluster_go_analyze(cluster_files[1])
cluster2go <- cluster_go_analyze(cluster_files[2])
cluster3go <- cluster_go_analyze(cluster_files[3])
cluster4go <- cluster_go_analyze(cluster_files[4])
cluster5go <- cluster_go_analyze(cluster_files[5])
cluster6go <- cluster_go_analyze(cluster_files[6])
cluster7go <- cluster_go_analyze(cluster_files[7])
cluster8go <- cluster_go_analyze(cluster_files[8])
cluster9go <- cluster_go_analyze(cluster_files[9])
cluster10go <- cluster_go_analyze(cluster_files[10])
cluster11go <- cluster_go_analyze(cluster_files[11])
cluster12go <- cluster_go_analyze(cluster_files[12])
cluster13go <- cluster_go_analyze(cluster_files[13])
cluster14go <- cluster_go_analyze(cluster_files[14])
cluster15go <- cluster_go_analyze(cluster_files[15])
cluster16go <- cluster_go_analyze(cluster_files[16])
cluster17go <- cluster_go_analyze(cluster_files[17])
cluster_df_list <- list(cluster1go, cluster2go, cluster3go, cluster4go, cluster5go, cluster6go, cluster7go, cluster8go,
cluster9go, cluster10go, cluster11go, cluster12go, cluster13go, cluster14go, cluster15go, cluster16go, cluster17go)
setwd("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/cluster_rdata_BP")
for(i in 1:length(cluster_files)) {
filename <- cluster_files[i]
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
save(cluster_df_list[i], file= paste0("cluster", number, "go.RData"))
}
cluster_df_list <- c(cluster1go, cluster2go, cluster3go, cluster4go, cluster5go, cluster6go, cluster7go, cluster8go,
cluster9go, cluster10go, cluster11go, cluster12go, cluster13go, cluster14go, cluster15go, cluster16go, cluster17go)
setwd("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/cluster_rdata_BP")
for(i in 1:length(cluster_files)) {
filename <- cluster_files[i]
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
save(cluster_df_list[i], file= paste0("cluster", number, "go.RData"))
}
cluster_df_list <- list(cluster1go, cluster2go, cluster3go, cluster4go, cluster5go, cluster6go, cluster7go, cluster8go,
cluster9go, cluster10go, cluster11go, cluster12go, cluster13go, cluster14go, cluster15go, cluster16go, cluster17go)
for(i in 1:length(cluster_files)) {
filename <- cluster_files[i]
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
save(cluster_df_list[[i]], file= paste0("cluster", number, "go.RData"))
}
cluster_df_list <- list(cluster1go, cluster2go, cluster3go, cluster4go, cluster5go, cluster6go, cluster7go, cluster8go, cluster9go, cluster10go, cluster11go, cluster12go, cluster13go, cluster14go, cluster15go, cluster16go, cluster17go)
for(i in 1:length(cluster_files)) {
filename <- cluster_files[i]
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
save(cluster_df_list[[i]], file= paste0("cluster", number, "go.RData"))
}
View(cluster_df_list)
print(i)
for(i in 1:length(cluster_files)) {
filename <- cluster_files[i]
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(i)
save(cluster_df_list[[i]], file= paste0("cluster", number, "go.RData"))
}
save(list=cluster_df_list,file='clustergo_BP.Rdata')
for(i in 1:length(cluster_files)) {
filename <- cluster_files[i]
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(i)
save(list=cluster_df_list[[i]], file= paste0("cluster", number, "go.RData"))
}
for(i in 1:length(cluster_files)) {
filename <- cluster_files[i]
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(i)
save(list=cluster_df_list[[i]], file= paste0("cluster", number, "go.RData"))
}
save(list=cluster_df_list[i], file= paste0("cluster", number, "go.RData"))
for(i in 1:length(cluster_files)) {
filename <- cluster_files[i]
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(i)
save(list=cluster_df_list[i], file= paste0("cluster", number, "go.RData"))
}
save(list=cluster_df_list,file='clustergo_BP.Rdata')
save(cluster_df_list,file='clustergo_BP.Rdata')
nums <- list(1:17)
View(nums)
nums <- c(1:17)
write.csv(cluster_df_list[i],paste0('cluster', nums[i],'.txt'))
for( i in 1:length(cluster_df_list)) {
write.csv(cluster_df_list[i],paste0('cluster', nums[i],'.txt'))
}
cluster_go_analyze <- function(filename){
# import cluster csv
cluster_path <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/cluster_csvs"
cluster <- read.csv(file.path(cluster_path, filename))
# get cluster number
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
# get list of ens genes from cluster
cluster_genes <- cluster$X
# get de info from toptags table for only genes in cluster
cluster_de <- et.CABvsDMSO_toptags[c(cluster_genes),]
# goseq
genes <- as.integer(p.adjust(cluster_de$PValue[cluster_de$logFC != 0], method = "BH") < .05)
names(genes) <- row.names(cluster_de[cluster_de$logFC != 0, ])
table(genes)
pwf <- nullp(genes, "rn4", "ensGene")
GO.wall <- goseq(pwf, "rn4", "ensGene", test.cats = c("GO:CC"))
head(GO.wall)
return(GO.wall)
}
cluster_files <- list.files(cluster_path)
cluster1go <- cluster_go_analyze(cluster_files[1])
cluster2go <- cluster_go_analyze(cluster_files[2])
cluster3go <- cluster_go_analyze(cluster_files[3])
cluster4go <- cluster_go_analyze(cluster_files[4])
cluster5go <- cluster_go_analyze(cluster_files[5])
cluster6go <- cluster_go_analyze(cluster_files[6])
cluster7go <- cluster_go_analyze(cluster_files[7])
cluster8go <- cluster_go_analyze(cluster_files[8])
cluster9go <- cluster_go_analyze(cluster_files[9])
cluster10go <- cluster_go_analyze(cluster_files[10])
cluster11go <- cluster_go_analyze(cluster_files[11])
cluster12go <- cluster_go_analyze(cluster_files[12])
cluster13go <- cluster_go_analyze(cluster_files[13])
cluster14go <- cluster_go_analyze(cluster_files[14])
cluster15go <- cluster_go_analyze(cluster_files[15])
cluster16go <- cluster_go_analyze(cluster_files[16])
cluster17go <- cluster_go_analyze(cluster_files[17])
cluster_df_list <- list(cluster1go, cluster2go, cluster3go, cluster4go, cluster5go, cluster6go, cluster7go, cluster8go, cluster9go, cluster10go, cluster11go, cluster12go, cluster13go, cluster14go, cluster15go, cluster16go, cluster17go)
setwd("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/cluster_rdata_CC")
save(cluster_df_list,file='clustergo_CC.Rdata')
nums <- c(1:17)
for( i in 1:length(cluster_df_list)) {
write.csv(cluster_df_list[i],paste0('cluster', nums[i],'.txt'))
}
cluster_go_analyze <- function(filename){
# import cluster csv
cluster_path <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/cluster_csvs"
cluster <- read.csv(file.path(cluster_path, filename))
# get cluster number
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
# get list of ens genes from cluster
cluster_genes <- cluster$X
# get de info from toptags table for only genes in cluster
cluster_de <- et.CABvsDMSO_toptags[c(cluster_genes),]
# goseq
genes <- as.integer(p.adjust(cluster_de$PValue[cluster_de$logFC != 0], method = "BH") < .05)
names(genes) <- row.names(cluster_de[cluster_de$logFC != 0, ])
table(genes)
pwf <- nullp(genes, "rn4", "ensGene")
GO.wall <- goseq(pwf, "rn4", "ensGene", test.cats = c("GO:MF"))
head(GO.wall)
return(GO.wall)
}
cluster_files <- list.files(cluster_path)
cluster1go <- cluster_go_analyze(cluster_files[1])
cluster2go <- cluster_go_analyze(cluster_files[2])
cluster3go <- cluster_go_analyze(cluster_files[3])
cluster4go <- cluster_go_analyze(cluster_files[4])
cluster5go <- cluster_go_analyze(cluster_files[5])
cluster6go <- cluster_go_analyze(cluster_files[6])
cluster7go <- cluster_go_analyze(cluster_files[7])
cluster8go <- cluster_go_analyze(cluster_files[8])
cluster9go <- cluster_go_analyze(cluster_files[9])
cluster10go <- cluster_go_analyze(cluster_files[10])
cluster11go <- cluster_go_analyze(cluster_files[11])
cluster12go <- cluster_go_analyze(cluster_files[12])
cluster13go <- cluster_go_analyze(cluster_files[13])
cluster14go <- cluster_go_analyze(cluster_files[14])
cluster15go <- cluster_go_analyze(cluster_files[15])
cluster16go <- cluster_go_analyze(cluster_files[16])
cluster17go <- cluster_go_analyze(cluster_files[17])
cluster_df_list <- list(cluster1go, cluster2go, cluster3go, cluster4go, cluster5go, cluster6go, cluster7go, cluster8go, cluster9go, cluster10go, cluster11go, cluster12go, cluster13go, cluster14go, cluster15go, cluster16go, cluster17go)
setwd("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/cluster_rdata_MF")
save(cluster_df_list,file='clustergo_MF.Rdata')
nums <- c(1:17)
for( i in 1:length(cluster_df_list)) {
write.csv(cluster_df_list[i],paste0('cluster', nums[i],'.txt'))
}
View(cluster)
cluster$X
cluster1go_exp <- select(cluster1go, c('category', 'over_represented_pvalue', 'term'))
write.csv(cluster1go_exp,'cluster1go_exp.txt')
write.csv(cluster1go_exp,'cluster1go_exp.txt', row.names = FALSE, quote = FALSE, col.names = FALSE)
# define different cell-types that will be shaded
caspase <- c('Casp3', 'Casp7', 'Casp9')
calpain <- c('Capn1', 'Capn3', 'Capn6')
mito <- c("Tp53", 'Bcl2l1', 'Bax', 'Sod2', 'Cycs')
ion_channels <- c("Scn2a", "Kcnh2", 'Kcnq5', 'Cacna1c')
select_genes <- c(caspase, calpain, mito) #, ion_channels)
## mito only ----
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=mito,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
# shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color,
# colAlpha = 0.9,
max.overlaps = Inf
)
keyvals.shape_basic <- ifelse(
CABvsDMSO_df$Symbol %in% mito, 19, 17)
keyvals.shape_basic[is.na(keyvals.shape_basic)] <- 17
names(keyvals.shape_basic)[keyvals.shape_basic == 19] <- 'Gene of Interest'
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=mito,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color,
# colAlpha = 0.9,
max.overlaps = Inf
)
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=mito,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color,
colAlpha = 0.9,
max.overlaps = Inf
)
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=select_genes,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
widthConnectors = 0.75
subtitle = "",
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=select_genes,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
widthConnectors = 0.75,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
# shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color,
# colAlpha = 0.9,
max.overlaps = Inf
)
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=mito,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
widthConnectors = 0.2,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color,
colAlpha = 0.9,
max.overlaps = Inf
)
?ifelse
keyvals.shape_basic <- ifelse(CABvsDMSO_df$Symbol %in% mito, 19, 17)
keyvals.shape_basic <- ifelse(et.CABvsDMSO_toptags$Symbol %in% mito, 19, 17)
keyvals.shape_basic[is.na(keyvals.shape_basic)] <- 17
names(keyvals.shape_basic)[keyvals.shape_basic == 19] <- 'Gene of Interest'
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=mito,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
widthConnectors = 0.2,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color,
colAlpha = 0.9,
max.overlaps = Inf
)
keyvals.shape_basic <- ifelse(et.CABvsDMSO_toptags$Symbol %in% mito, 'red', 'gray')
keyvals.shape_basic[is.na(keyvals.shape_basic)] <- 17
names(keyvals.shape_basic)[keyvals.shape_basic == 19] <- 'Gene of Interest'
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=mito,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
widthConnectors = 0.2,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
# shapeCustom = keyvals.shape_basic,
colCustom = keyvals.shape_basic,
colAlpha = 0.9,
max.overlaps = Inf
)
keyvals.shape_basic <- ifelse(et.CABvsDMSO_toptags$Symbol %in% mito, 19, 17)
keyvals.shape_basic[is.na(keyvals.shape_basic)] <- 17
names(keyvals.shape_basic)[keyvals.shape_basic == 19] <- 'Gene of Interest'
EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=mito,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
widthConnectors = 0.2,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.shape_basic,
colAlpha = 0.9,
max.overlaps = Inf
)
