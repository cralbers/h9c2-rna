if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Glimma")
library(limma)
library(edgeR)
R.home("bin")
R.home()
library(Biobase)
library(rintrojs)
install.packages('rintrojs')
library(Biobase)
library(rintrojs)
library(ggpubr)
library(png)
library(ggimage)
install.packages('ggimage')
library(Biobase)
library(rintrojs)
library(ggpubr)
library(png)
library(ggimage)
library(ggrepel)
library(plyr)
library(ggforce)
library(shiny)
library(shinydashboard)
install.packages('shinydashboard')
library(Biobase)
library(rintrojs)
library(ggpubr)
library(png)
library(ggimage)
library(ggrepel)
library(plyr)
library(ggforce)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(ggfortify)
install.packages('ggfortify')
library(Biobase)
library(rintrojs)
library(ggpubr)
library(png)
library(ggimage)
library(ggrepel)
library(plyr)
library(ggforce)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(ggfortify)
library(readr)
library(stats)
library(shinyjs)
library(htmltools)
library(magrittr)
library(gridExtra)
library(grid)
library(gtools)
library(shinyBS)
install.packages('shinyBS')
library(Biobase)
library(rintrojs)
library(ggpubr)
library(png)
library(ggimage)
library(ggrepel)
library(plyr)
library(ggforce)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(ggfortify)
library(readr)
library(stats)
library(shinyjs)
library(htmltools)
library(magrittr)
library(gridExtra)
library(grid)
library(gtools)
library(shinyBS)
shiny::runGitHub("figureone", "foocheung")
install.packages('hexSticker')
shiny::runGitHub("figureone", "foocheung")
install.packages('shinyauthr')
shiny::runGitHub("figureone", "foocheung")
install.packages('raster')
shiny::runGitHub("figureone", "foocheung")
library(gprofiler2)
library(dplyr)
library(plotly)
library(htmlwidgets)
library(docstring)
setwd("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster")
cluster_path <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/cluster_csvs"
cluster_files <- list.files(cluster_path)
filename <- "h9c2_cab_filt35sum_kmeanscluster2.csv"
load("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/et.CABvsDMSO_toptags.RData")
all_de_genes <- row.names(et.CABvsDMSO_toptags)
all_de_genes <- gconvert(all_de_genes, organism = "rnorvegicus", target = "ENTREZGENE")
get_cluster_genes <- function(filename){
cluster <- read.csv(file.path(cluster_path, filename))
# get cluster number
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
genes <- cluster$X
write.table(genes, file = paste0("cluster", number, "genes.txt"), sep = "",
row.names = FALSE, col.names = FALSE, quote = FALSE)
## get list of ens genes from cluster
cluster_genes <- cluster$X
return(cluster_genes)
}
cluster <- get_cluster_genes(filename)
cluster <- gconvert(cluster,
organism = "rnorvegicus",
target = "ENTREZGENE"
)
gprofiler_analysis <- function(filename, source, folder) {
#' run gprofiler analysis on cluster
#'
#' @param filename string. cluster csv file name
#' @param source string. one of GO (GO:BP, GO:MF, GO:CC to select a particular GO branch), KEGG, REAC, TF, MIRNA, CO-RUM, HP,
#' HPA, WP. Defines what data sources gprofiler should pull from
#' @param folder string. folder name that will be appended to beginning of filenames
#'
#' @returns manhattan plot as html and tiff, table with top 5 enriched terms as tiff, gprofiler results saved to rdata object in wd
#'
#'
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(paste0("cluster ", number))
cluster <- get_cluster_genes(filename)
cluster <- gconvert(cluster,
organism = "rnorvegicus",
target = "ENTREZGENE")
print("convert gene names complete")
gprofiler_results_oe <- gost(query = cluster$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = source,
evcodes = TRUE,
highlight = TRUE)
print("gprofiler complete")
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
p_stat <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = FALSE)
saveWidget(ggplotly(p_inter), file = paste0(folder, "/", source, "_", number, "_manhat_inter", '.html'))
print("saved interactive Manhattan")
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:5)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0(folder, "/", source, "_", number, "_top5table", '.tiff'))
publish_gostplot(p_stat, filename = paste0(folder, "/", source, "_", number, "_manhat_static", '.tiff'))
save(gprofiler_results_oe, file = paste0(folder, "/", source, "_", number, '.RData'))
}
cluster_path2 <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/cluster_csvs_HP"
cluster_files <- list.files(cluster_path2)
upreg <- subset(et.CABvsDMSO_toptags,logFC > 1 & FDR < 0.05)
downreg <- subset(et.CABvsDMSO_toptags,logFC < (-1) & FDR < 0.05)
sig_de <- rbind(upreg, downreg)
sig_de_genes <- gconvert(rownames(sig_de), organism = "rnorvegicus", target = "ENTREZGENE")
sig_source <- NULL
View(sig_de)
gprofiler_results_oe <- gost(query = rownames(sig_de_genes),
organism = "rnorvegicus",
ordered_query = F, #T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "GO:MF",
evcodes = TRUE,
highlight = TRUE)
sig_de_genes <- gconvert(rownames(sig_de), organism = "rnorvegicus", target = "PROTEIN_ID")
View(sig_de_genes)
sig_de_genes <- gconvert(rownames(sig_de), organism = "rnorvegicus", target = "UCSC")
sig_de_genes <- gconvert(rownames(sig_de), organism = "rnorvegicus", target = "UNIPROT_GN")
View(sig_de)
sig_de_genes <- gconvert(rownames(sig_de), organism = "rnorvegicus", target = "ENSG")
rowSums(is.na(sig_de))
rowSums(is.na(sig_de$EntrezGene))
(is.na(sig_de$EntrezGene))
sum(is.na(sig_de$EntrezGene))
sum(is.na(sig_de$Symbol))
sum(is.na(sig_de$RefSeq))
sig_de <- rbind(upreg, downreg)
sig_de_genes <- gconvert(rownames(sig_de), organism = "rnorvegicus", target = "ENSG")
sum(is.na(sig_de$RefSeq))
sig_source <- NULL
gprofiler_results_oe <- gost(query = rownames(sig_de_genes),
organism = "rnorvegicus",
ordered_query = F, #T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "GO:MF",
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe <- gost(query = rownames(sig_de),
organism = "rnorvegicus",
ordered_query = F, #T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "GO:MF",
evcodes = TRUE,
highlight = TRUE)
View(gprofiler_results_oe)
gprofiler_results_oe_tbl <- gprofiler_results_oe$result
View(gprofiler_results_oe_tbl)
gprofiler_results_oe <- gost(query = rownames(sig_de),
organism = "rnorvegicus",
ordered_query = F, #T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = NULL,
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe_tbl <- gprofiler_results_oe$result
gprofiler_results_oe_tbl_save <- apply(gprofiler_results_oe$result, 2, as.character)
write.table(gprofiler_results_oe_tbl_save, "gprofiler_all.tsv", sep='\t')
save(gprofiler_results_oe, file = "gprofiler_all_ordered.RData")
