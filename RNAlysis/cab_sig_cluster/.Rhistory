ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "HP", # paste0("GO:", source), NULL,
evcodes = TRUE,
highlight = TRUE)
print("gprofiler complete")
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
p_stat <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = FALSE)
saveWidget(ggplotly(p_inter), file = paste0(folder, "/", source, "_", number, "_manhat_inter", '.html'))
print("saved interactive Manhattan")
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:5)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0(folder, "/", source, "_", number, "_top5table", '.tiff'))
publish_gostplot(p_stat, filename = paste0(folder, "/", source, "_", number, "_manhat_static", '.tiff'))
save(gprofiler_results_oe, file = paste0(folder, "/", source, "_", number, '.RData'))
}
gprofiler_analysis(cluster_files[2], "HP", "gprofiler_HP_10")
get_cluster_genes <- function(filename){
cluster <- read.csv(file.path(cluster_path, filename))
# get cluster number
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
genes <- cluster$X
# write.table(genes, file = paste0("cluster", number, "genes.txt"), sep = "",
#             row.names = FALSE, col.names = FALSE, quote = FALSE)
## get list of ens genes from cluster ----
cluster_genes <- cluster$X
return(cluster_genes)
}
gprofiler_analysis <- function(filename, source, folder) {
#' run gprofiler analysis on cluster
#'
#' @param filename string. cluster csv file name
#' @param source string. one of GO (GO:BP, GO:MF, GO:CC to select a particular GO branch), KEGG, REAC, TF, MIRNA, CO-RUM, HP,
#' HPA, WP. Defines what data sources gprofiler should pull from
#' @param folder string. folder name that will be appended to beginning of filenames
#'
#' @returns manhattan plot as html and tiff, table with top 5 enriched terms as tiff, gprofiler results saved to rdata object in wd
#'
#'
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(paste0("cluster ", number))
cluster <- get_cluster_genes(filename)
cluster <- gconvert(cluster,
organism = "rnorvegicus",
target = "ENTREZGENE")
print("convert gene names complete")
gprofiler_results_oe <- gost(query = cluster$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "HP", # paste0("GO:", source), NULL,
evcodes = TRUE,
highlight = TRUE)
print("gprofiler complete")
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
p_stat <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = FALSE)
saveWidget(ggplotly(p_inter), file = paste0(folder, "/", source, "_", number, "_manhat_inter", '.html'))
print("saved interactive Manhattan")
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:5)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0(folder, "/", source, "_", number, "_top5table", '.tiff'))
publish_gostplot(p_stat, filename = paste0(folder, "/", source, "_", number, "_manhat_static", '.tiff'))
save(gprofiler_results_oe, file = paste0(folder, "/", source, "_", number, '.RData'))
}
gprofiler_analysis(cluster_files[2], "HP", "gprofiler_HP_10")
setwd("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_sig_cluster/")
cluster_path <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_sig_cluster/cluster_csvs_10"
load("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/et.CABvsDMSO_toptags.RData")
# get only sig DE counts ----
counts <- read.csv("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/cpm_cab.csv")
rownames(counts) <- counts[,1]
counts[,1] <- NULL
sig_de <- read.csv("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/sig_de.csv")
## get list of ens genes from sig de ----
sig_de_genes <- sig_de$X
## get de info from toptags table for only genes in cluster ----
sig_de_counts <- counts[c(sig_de_genes),]
# write.csv(sig_de_counts, "sig_de_cpm_cab.csv", quote=FALSE, row.names = TRUE)
# gprofiler analysis ----
cluster_files <- list.files(cluster_path)
get_cluster_genes <- function(filename){
cluster <- read.csv(file.path(cluster_path, filename))
# get cluster number
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
genes <- cluster$X
# write.table(genes, file = paste0("cluster", number, "genes.txt"), sep = "",
#             row.names = FALSE, col.names = FALSE, quote = FALSE)
## get list of ens genes from cluster ----
cluster_genes <- cluster$X
return(cluster_genes)
}
gprofiler_analysis <- function(filename, source, folder) {
#' run gprofiler analysis on cluster
#'
#' @param filename string. cluster csv file name
#' @param source string. one of GO (GO:BP, GO:MF, GO:CC to select a particular GO branch), KEGG, REAC, TF, MIRNA, CO-RUM, HP,
#' HPA, WP. Defines what data sources gprofiler should pull from
#' @param folder string. folder name that will be appended to beginning of filenames
#'
#' @returns manhattan plot as html and tiff, table with top 5 enriched terms as tiff, gprofiler results saved to rdata object in wd
#'
#'
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(paste0("cluster ", number))
cluster <- get_cluster_genes(filename)
cluster <- gconvert(cluster,
organism = "rnorvegicus",
target = "ENTREZGENE")
print("convert gene names complete")
gprofiler_results_oe <- gost(query = cluster$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "HP", # paste0("GO:", source), NULL,
evcodes = TRUE,
highlight = TRUE)
print("gprofiler complete")
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
p_stat <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = FALSE)
saveWidget(ggplotly(p_inter), file = paste0(folder, "/", source, "_", number, "_manhat_inter", '.html'))
print("saved interactive Manhattan")
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:5)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0(folder, "/", source, "_", number, "_top5table", '.tiff'))
publish_gostplot(p_stat, filename = paste0(folder, "/", source, "_", number, "_manhat_static", '.tiff'))
save(gprofiler_results_oe, file = paste0(folder, "/", source, "_", number, '.RData'))
}
load("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/et.CABvsDMSO_toptags.RData")
upreg <- subset(et.CABvsDMSO_toptags,logFC > 1 & FDR < 0.05)
downreg <- subset(et.CABvsDMSO_toptags,logFC < (-1) & FDR < 0.05)
sig_de <- rbind(upreg, downreg)
sig_de_genes <- gconvert(rownames(sig_de), organism = "rnorvegicus", target = "ENTREZGENE")
sig_source <- NULL
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = NULL,
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:5)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0("all", "_", "sig_de_genes", "_top5table", '.tiff'))
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
saveWidget(ggplotly(p_inter), file = paste0(folder, "/", source, "_", number, "_manhat_inter", '.html'))
saveWidget(ggplotly(p_inter), file = paste0(source, "_", number, "_manhat_inter", '.html'))
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
saveWidget(ggplotly(p_inter), file = paste0('all', "_", number, "_manhat_inter", '.html'))
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
saveWidget(ggplotly(p_inter), file = paste0('all', "_", "sig_de", "_manhat_inter", '.html'))
p_stat <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = FALSE)
publish_gostplot(p_stat, filename = paste0('all', "_", "sig_de", "_manhat_static", '.tiff'))
setwd("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_sig_cluster/")
cluster_path <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_sig_cluster/cluster_csvs_10"
load("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/et.CABvsDMSO_toptags.RData")
# get only sig DE counts ----
counts <- read.csv("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/cpm_cab.csv")
rownames(counts) <- counts[,1]
counts[,1] <- NULL
sig_de <- read.csv("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster/sig_de.csv")
## get list of ens genes from sig de ----
sig_de_genes <- sig_de$X
## get de info from toptags table for only genes in cluster ----
sig_de_counts <- counts[c(sig_de_genes),]
# write.csv(sig_de_counts, "sig_de_cpm_cab.csv", quote=FALSE, row.names = TRUE)
# gprofiler analysis ----
cluster_files <- list.files(cluster_path)
gprofiler_analysis <- function(filename, source, folder) {
#' run gprofiler analysis on cluster
#'
#' @param filename string. cluster csv file name
#' @param source string. one of GO (GO:BP, GO:MF, GO:CC to select a particular GO branch), KEGG, REAC, TF, MIRNA, CO-RUM, HP,
#' HPA, WP. Defines what data sources gprofiler should pull from
#' @param folder string. folder name that will be appended to beginning of filenames
#'
#' @returns manhattan plot as html and tiff, table with top 5 enriched terms as tiff, gprofiler results saved to rdata object in wd
#'
#'
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(paste0("cluster ", number))
cluster <- get_cluster_genes(filename)
cluster <- gconvert(cluster,
organism = "rnorvegicus",
target = "ENTREZGENE")
print("convert gene names complete")
gprofiler_results_oe <- gost(query = cluster$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = paste0("GO:", source), NULL,
evcodes = TRUE,
highlight = TRUE)
print("gprofiler complete")
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
p_stat <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = FALSE)
saveWidget(ggplotly(p_inter), file = paste0(folder, "/", source, "_", number, "_manhat_inter", '.html'))
print("saved interactive Manhattan")
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:5)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0(folder, "/", source, "_", number, "_top5table", '.tiff'))
publish_gostplot(p_stat, filename = paste0(folder, "/", source, "_", number, "_manhat_static", '.tiff'))
save(gprofiler_results_oe, file = paste0(folder, "/", source, "_", number, '.RData'))
}
cluster_files
gprofiler_analysis(cluster_files[3], "CC", "gprofiler_CC_10")
gprofiler_analysis <- function(filename, source, folder) {
#' run gprofiler analysis on cluster
#'
#' @param filename string. cluster csv file name
#' @param source string. one of GO (GO:BP, GO:MF, GO:CC to select a particular GO branch), KEGG, REAC, TF, MIRNA, CO-RUM, HP,
#' HPA, WP. Defines what data sources gprofiler should pull from
#' @param folder string. folder name that will be appended to beginning of filenames
#'
#' @returns manhattan plot as html and tiff, table with top 5 enriched terms as tiff, gprofiler results saved to rdata object in wd
#'
#'
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(paste0("cluster ", number))
cluster <- get_cluster_genes(filename)
cluster <- gconvert(cluster,
organism = "rnorvegicus",
target = "ENTREZGENE")
print("convert gene names complete")
gprofiler_results_oe <- gost(query = cluster$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = paste0("GO:", source), NULL,
evcodes = TRUE,
highlight = TRUE)
print("gprofiler complete")
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
p_stat <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = FALSE)
saveWidget(ggplotly(p_inter), file = paste0(folder, "/", source, "_", number, "_manhat_inter", '.html'))
print("saved interactive Manhattan")
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:5)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0(folder, "/", source, "_", number, "_top5table", '.tiff'))
publish_gostplot(p_stat, filename = paste0(folder, "/", source, "_", number, "_manhat_static", '.tiff'))
save(gprofiler_results_oe, file = paste0(folder, "/", source, "_", number, '.RData'))
}
cluster_files
gprofiler_analysis(cluster_files[3], "CC", "gprofiler_CC_10")
gprofiler_analysis <- function(filename, source, folder) {
#' run gprofiler analysis on cluster
#'
#' @param filename string. cluster csv file name
#' @param source string. one of GO (GO:BP, GO:MF, GO:CC to select a particular GO branch), KEGG, REAC, TF, MIRNA, CO-RUM, HP,
#' HPA, WP. Defines what data sources gprofiler should pull from
#' @param folder string. folder name that will be appended to beginning of filenames
#'
#' @returns manhattan plot as html and tiff, table with top 5 enriched terms as tiff, gprofiler results saved to rdata object in wd
#'
#'
string <- strsplit(filename, "\\.")[[1]]
number <- strsplit(string, "cluster")[[1]][2]
print(paste0("cluster ", number))
cluster <- get_cluster_genes(filename)
cluster <- gconvert(cluster,
organism = "rnorvegicus",
target = "ENTREZGENE")
print("convert gene names complete")
gprofiler_results_oe <- gost(query = cluster$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = paste0("GO:", source), #NULL,
evcodes = TRUE,
highlight = TRUE)
print("gprofiler complete")
p_inter <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = TRUE)
p_stat <- gostplot(gprofiler_results_oe, capped = FALSE, interactive = FALSE)
saveWidget(ggplotly(p_inter), file = paste0(folder, "/", source, "_", number, "_manhat_inter", '.html'))
print("saved interactive Manhattan")
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:5)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0(folder, "/", source, "_", number, "_top5table", '.tiff'))
publish_gostplot(p_stat, filename = paste0(folder, "/", source, "_", number, "_manhat_static", '.tiff'))
save(gprofiler_results_oe, file = paste0(folder, "/", source, "_", number, '.RData'))
}
gprofiler_analysis(cluster_files[3], "CC", "gprofiler_CC_10")
gprofiler_analysis(cluster_files[4], "CC", "gprofiler_CC_10")
gprofiler_analysis(cluster_files[5], "CC", "gprofiler_CC_10")
gprofiler_analysis(cluster_files[7], "CC", "gprofiler_CC_10")
gprofiler_analysis(cluster_files[9], "CC", "gprofiler_CC_10")
gprofiler_analysis(cluster_files[10], "CC", "gprofiler_CC_10")
gprofiler_analysis(cluster_files[2], "CC", "gprofiler_CC_10")
for( i in 1:length(cluster_files)) {
gprofiler_analysis(cluster_files[i], "BP", "gprofiler_BP_10")
}
cluster_path <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_sig_cluster/cluster_csvs_5"
cluster_files <- list.files(cluster_path)
cluster_files
for( i in 1:length(cluster_files)) {
gprofiler_analysis(cluster_files[i], "CC", "gprofiler_CC_5")
}
for( i in 1:length(cluster_files)) {
gprofiler_analysis(cluster_files[i], "CC", "gprofiler_CC_5")
}
load("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/et.CABvsDMSO_toptags.RData")
upreg <- subset(et.CABvsDMSO_toptags,logFC > 1 & FDR < 0.05)
downreg <- subset(et.CABvsDMSO_toptags,logFC < (-1) & FDR < 0.05)
sig_de <- rbind(upreg, downreg)
sig_de_genes <- gconvert(rownames(sig_de), organism = "rnorvegicus", target = "ENTREZGENE")
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "HP",
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:5)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0("HP", "_", "sig_de_genes", "_top5table", '.tiff'))
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:10)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0("HP", "_", "sig_de_genes", "_top5table", '.tiff'))
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:10)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0("HP", "_", "sig_de_genes", "_top10table", '.tiff'))
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "MF",
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:10)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0("MF", "_", "sig_de_genes", "_top10table", '.tiff'))
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "CC",
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "GO:MF",
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:10)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0("MF", "_", "sig_de_genes", "_top10table", '.tiff'))
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "GO:CC",
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:10)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0("CC", "_", "sig_de_genes", "_top10table", '.tiff'))
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "GO:BP",
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
idx <- gprofiler_results_oe_tbl #[is.element(gprofiler_results_oe_tbl$highlighted, TRUE),]
publish_gosttable(idx, highlight_terms = idx$term_id[c(1:10)],
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = paste0("BP", "_", "sig_de_genes", "_top10table", '.tiff'))
View(gprofiler_results_oe)
## Order the results by p-adjusted value
gprofiler_results_oe_reordered <- gprofiler_results_oe_tbl[order(gprofiler_results_oe_tbl$p_value), ]
GOpval_oe <- gprofiler_results_oe_reordered[ , c("term.id", "p.value")]
View(gprofiler_results_oe_tbl)
View(gprofiler_results_oe_reordered)
View(gprofiler_results_oe_reordered)
View(gprofiler_results_oe_tbl)
GOpval_oe <- gprofiler_results_oe_reordered[ , c("term_id", "p_value")]
write.table(GOpval_oe, "results/GOs_oe.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(GOpval_oe, "GOs_oe.txt", quote=FALSE, row.names = FALSE, col.names = FALSE)
BiocManager::install("DOSE")
library(DOSE)
library(enrichplot)
library(clusterProfiler)
library(org.Rn.eg.db)
dotplot(gprofiler_results_oe_reordered, x="intersection_size")
write.csv(subset(gprofiler_results_oe_reordered, select=c("term_id", "p_value", "intersection"), "monago.csv", quote=FALSE)
write.csv(subset(gprofiler_results_oe_reordered, select=c("term_id", "p_value", "intersection"), "monago.csv", quote=FALSE))
write.csv(subset(gprofiler_results_oe_reordered, select=c("term_id", "p_value", "intersection"), "monago.csv", quote=FALSE))
write.csv(subset(gprofiler_results_oe_reordered, select=c("term_id", "p_value", "intersection")), "monago.csv", quote=FALSE)
write.csv(subset(gprofiler_results_oe_reordered, select=c("term_id", "p_value", "intersection")), "monago.csv", quote=FALSE, row.names = FALSE, sep = ";")
)
write.table(subset(gprofiler_results_oe_reordered, select=c("term_id", "p_value", "intersection")), "monago.csv", quote=FALSE, row.names = FALSE, sep = ";")
write.table(subset(gprofiler_results_oe_reordered, select=c("term_id", "p_value", "intersection")),
"monago.csv", quote=FALSE, row.names = FALSE, sep = ";")
"sig_de_GO.csv", quote=FALSE, row.names = FALSE, sep = ";")
"sig_de_GO.csv", quote=FALSE, row.names = FALSE, sep = ";")
write.table(subset(gprofiler_results_oe_reordered, select=c("term_id"), #, "p_value", "intersection")),
"sig_de_GO.csv", quote=FALSE, row.names = FALSE, sep = ";")
"sig_de_GO.csv", quote=FALSE, row.names = FALSE, sep = ";")
write.table(subset(gprofiler_results_oe_reordered, select=c("term_id"), "sig_de_GO.csv", quote=FALSE, row.names = FALSE, sep = ";") #, "p_value", "intersection")),
write.table(subset(gprofiler_results_oe_reordered, select=c("term_id")), #, "p_value", "intersection")),
write.table(subset(gprofiler_results_oe_reordered, select=c("term_id")), "sig_de_GO.csv", quote=FALSE, row.names = FALSE, sep = ";")
