# Create a vector of the gene unuiverse
kegg_gene_list <- df2_aggregated$logFC
# Name vector with ENTREZ ids
names(kegg_gene_list) <- df2_aggregated$Y
# omit any NA values
kegg_gene_list<-na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
if(anyDuplicated(names(kegg_gene_list))) {
stop("There are duplicate ENTREZ IDs in the kegg_gene_list.")
}
# Produce the native KEGG plot (PNG)
setwd(folder_path)
dme <- pathview(gene.data=kegg_gene_list,
pathway.id=id,
species = kegg_organism,
kegg.native = T,
out.suffix=paste(drug, "vsDMSO_pathview_et", sep=''),
low=list(gene="red"),
high=list(gene="green"))
setwd("~/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/")
}
kegg_pathway(df, cab_path, 'CAB', '05414')
# we want the log2 fold change
original_gene_list <- df$logFC
names(original_gene_list) <- df$X
names(original_gene_list)
# Convert gene IDs for gseKEGG function
# We will lose some genes here because not all IDs will be converted
ids<-bitr(names(original_gene_list), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb=org.Rn.eg.db)
# remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
dedup_ids <- ids[!duplicated(ids[c("ENSEMBL")]),]
# Create a new dataframe df2 which has only the genes which were successfully mapped using the bitr function above
df2 <- df[df$X %in% dedup_ids$ENSEMBL,]
# Create a new column in df2 with the corresponding ENTREZ IDs
df2$Y = dedup_ids$ENTREZID
View(df2)
# get ids of problematic entrezids that are duplicated or triplicated or quadrupilated hehe
n_occur <- data.frame(table(df2$Y))
View(n_occur)
df2_aggregated <- df2 %>%
group_by(Y) %>%
summarise(logFC = mean(logFC, na.rm = TRUE))
# Create a vector of the gene unuiverse
kegg_gene_list <- df2_aggregated$logFC
# Name vector with ENTREZ ids
names(kegg_gene_list) <- df2_aggregated$Y
# omit any NA values
kegg_gene_list<-na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
if(anyDuplicated(names(kegg_gene_list))) {
stop("There are duplicate ENTREZ IDs in the kegg_gene_list.")
}
# Produce the native KEGG plot (PNG)
setwd(folder_path)
dme <- pathview(gene.data=kegg_gene_list,
pathway.id=id,
species = kegg_organism,
kegg.native = T,
out.suffix=paste(drug, "vsDMSO_pathview_et", sep=''),
low=list(gene="red"),
high=list(gene="green"))
dme <- pathview(gene.data=kegg_gene_list,
pathway.id="05414",
species = kegg_organism,
kegg.native = T,
out.suffix=paste("CAB", "vsDMSO_pathview_et", sep=''),
low=list(gene="red"),
high=list(gene="green"))
kegg_pathway <- function(df, folder_path, drug, id) {
# we want the log2 fold change
original_gene_list <- df$logFC
names(original_gene_list) <- df$X
names(original_gene_list)
# Convert gene IDs for gseKEGG function
# We will lose some genes here because not all IDs will be converted
ids<-bitr(names(original_gene_list), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb=org.Rn.eg.db)
# remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
dedup_ids <- ids[!duplicated(ids[c("ENSEMBL")]),]
# Create a new dataframe df2 which has only the genes which were successfully mapped using the bitr function above
df2 <- df[df$X %in% dedup_ids$ENSEMBL,]
# Create a new column in df2 with the corresponding ENTREZ IDs
df2$Y = dedup_ids$ENTREZID
# get ids of problematic entrezids that are duplicated or triplicated or quadrupilated hehe
n_occur <- data.frame(table(df2$Y))
df2_aggregated <- df2 %>%
group_by(Y) %>%
summarise(logFC = mean(logFC, na.rm = TRUE))
# Create a vector of the gene unuiverse
kegg_gene_list <- df2_aggregated$logFC
# Name vector with ENTREZ ids
names(kegg_gene_list) <- df2_aggregated$Y
# omit any NA values
kegg_gene_list<-na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
if(anyDuplicated(names(kegg_gene_list))) {
stop("There are duplicate ENTREZ IDs in the kegg_gene_list.")
}
# Produce the native KEGG plot (PNG)
setwd(folder_path)
dme <- pathview(gene.data=kegg_gene_list,
pathway.id=id,
species = kegg_organism,
kegg.native = T,
out.suffix=paste(drug, "vsDMSO_pathview_et", sep=''),
low=list(gene="red"),
high=list(gene="green"))
setwd("~/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/")
}
kegg_pathway(df, cab_path, 'CAB', '05414')
return(dme)
kegg_pathway <- function(df, folder_path, drug, id) {
# we want the log2 fold change
original_gene_list <- df$logFC
names(original_gene_list) <- df$X
names(original_gene_list)
# Convert gene IDs for gseKEGG function
# We will lose some genes here because not all IDs will be converted
ids<-bitr(names(original_gene_list), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb=org.Rn.eg.db)
# remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
dedup_ids <- ids[!duplicated(ids[c("ENSEMBL")]),]
# Create a new dataframe df2 which has only the genes which were successfully mapped using the bitr function above
df2 <- df[df$X %in% dedup_ids$ENSEMBL,]
# Create a new column in df2 with the corresponding ENTREZ IDs
df2$Y = dedup_ids$ENTREZID
# get ids of problematic entrezids that are duplicated or triplicated or quadrupilated hehe
n_occur <- data.frame(table(df2$Y))
df2_aggregated <- df2 %>%
group_by(Y) %>%
summarise(logFC = mean(logFC, na.rm = TRUE))
# Create a vector of the gene unuiverse
kegg_gene_list <- df2_aggregated$logFC
# Name vector with ENTREZ ids
names(kegg_gene_list) <- df2_aggregated$Y
# omit any NA values
kegg_gene_list<-na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
if(anyDuplicated(names(kegg_gene_list))) {
stop("There are duplicate ENTREZ IDs in the kegg_gene_list.")
}
# Produce the native KEGG plot (PNG)
setwd(folder_path)
dme <- pathview(gene.data=kegg_gene_list,
pathway.id=id,
species = kegg_organism,
kegg.native = T,
out.suffix=paste(drug, "vsDMSO_pathview_et", sep=''),
low=list(gene="red"),
high=list(gene="green"))
setwd("~/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/")
return(dme)
}
kegg_pathway(df, cab_path, 'CAB', '05414')
dme <- kegg_pathway(df, cab_path, 'CAB', '05414')
dme
library(gprofiler2)
library(dplyr)
library(plotly)
library(htmlwidgets)
library(docstring)
setwd("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster")
load("gprofiler_all.RData")
load("gprofiler_all.RData")
View(gprofiler_results_oe)
as.table(gprofiler_results_oe)
as.table(gprofiler_results_oe$result)
as.data.frame(gprofiler_results_oe$result)
tbl <- as.data.frame(gprofiler_results_oe$result)
tbl
View(tbl)
write.csv(tbl, file = "gprofiler_all_results.csv", col.names = TRUE)
write.table(tbl, file = "gprofiler_all_results.csv", sep = "/t")
write.table(tbl, file = "gprofiler_all_results.csv", sep = "\t")
View(tbl)
tbl <- apply(tbl,2,as.character)
write.csv(tbl, file = "gprofiler_all_results.csv") #, sep = "\t")
write.csv(tbl, file = "gprofiler_all_results.csv", sep = "\t")
write.table(tbl, file = "gprofiler_all_results.csv", sep = "\t")
write.table(tbl, file = "gprofiler_all_results.csv", sep = "\t", quote = FALSE)
write.table(tbl, file = "gprofiler_all_results.tsv", sep = "\t", quote = FALSE)
View(tbl)
find_term <- function(term, df) {
if (term %in% df$term_name) {
term_df <- df[df$term_name == term]
print(term_df)
}
}
find_term("muscle tissue development", tbl)
term_df <- df[df$term_name == "muscle tissue development"]
term_df <- tbl[tbl$term_name == "muscle tissue development"]
setwd("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/RNAlysis/cab_only_cluster")
load("gprofiler_all.RData")
tbl <- as.data.frame(gprofiler_results_oe$result)
find_term <- function(term, df) {
if (term %in% df$term_name) {
term_df <- df[df$term_name == term]
print(term_df)
}
}
find_term("muscle tissue development", tbl)
term_df <- tbl[tbl$term_name == "muscle tissue development"]
term_df <- tbl[tbl$term_name == "muscle tissue development",]
View(term_df)
find_term <- function(term, df) {
if (term %in% df$term_name) {
term_df <- df[df$term_name == term,]
print(term_df)
}
}
find_term("muscle tissue development", tbl)
find_term('cytoplasm', tbl)
load("gprofiler_all.RData")
tbl <- as.data.frame(gprofiler_results_oe$result)
find_term <- function(term, df) {
if (term %in% df$term_name) {
term_df <- df[df$term_name == term,]
print(term_df)
}
}
find_term("acctin cytoskeleton organization", tbl)
find_term("actin cytoskeleton organization", tbl)
load("/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/et.CABvsDMSO_toptags.RData")
all_de_genes <- row.names(et.CABvsDMSO_toptags)
upreg <- subset(et.CABvsDMSO_toptags,logFC > 1 & FDR < 0.05)
downreg <- subset(et.CABvsDMSO_toptags,logFC < (-1) & FDR < 0.05)
sig_de <- rbind(upreg, downreg)
sig_de_genes <- gconvert(rownames(sig_de), organism = "rnorvegicus", target = "ENTREZGENE")
sig_source <- NULL
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
# sources = "GO:BP",
evcodes = TRUE,
highlight = TRUE)
save(gprofiler_results_oe, file = "gprofiler_all_ordered.RData")
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
# sources = "GO:BP",
evcodes = TRUE,
highlight = TRUE)
save(gprofiler_results_oe, file = "gprofiler_all_ordered.RData")
View(gprofiler_results_oe)
gprofiler_results_oe_tbl <- (gprofiler_results_oe$result)
write.table(gprofiler_results_oe_tbl, "gprofiler_all_ordered.tsv", sep='\t')
gprofiler_results_oe_tbl <- apply(gprofiler_results_oe$result, 2, as.character)
write.table(gprofiler_results_oe_tbl, "gprofiler_all_ordered.tsv", sep='\t')
gprofiler_results_oe_tbl <- gprofiler_results_oe$result
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F, #T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
# sources = "GO:BP",
evcodes = TRUE,
highlight = TRUE)
gprofiler_results_oe_tbl_save <- apply(gprofiler_results_oe$result, 2, as.character)
write.table(gprofiler_results_oe_tbl_save, "gprofiler_all.tsv", sep='\t')
gprofiler_results_oe_tbl <- gprofiler_results_oe$result
## generate cytoscape input ----
gem <- gprofiler_results_oe$result[,c("term_id", "term_name", "p_value", "intersection")]
colnames(gem) <- c("GO.ID", "Description", "p.Val", "Genes")
gem$FDR <- gem$p.Val
gem$Phenotype = "+1"
gem <- gem[,c("GO.ID", "Description", "p.Val", "FDR", "Phenotype", "Genes")]
head(gem, 3)
View(gem)
write.table(gem, file = "gProfiler_gem.txt", sep = "\t", quote = F, row.names = F)
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F, #T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "GO:BP",
evcodes = TRUE,
highlight = TRUE)
# generate cytoscape input ----
gem <- gprofiler_results_oe$result[,c("term_id", "term_name", "p_value", "intersection")]
colnames(gem) <- c("GO.ID", "Description", "p.Val", "Genes")
gem$FDR <- gem$p.Val
gem$Phenotype = "+1"
gem <- gem[,c("GO.ID", "Description", "p.Val", "FDR", "Phenotype", "Genes")]
head(gem, 3)
write.table(gem, file = "gProfiler_gem_GOBP.txt", sep = "\t", quote = F, row.names = F)
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F, #T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "GO:CC",
evcodes = TRUE,
highlight = TRUE)
# generate cytoscape input ----
gem <- gprofiler_results_oe$result[,c("term_id", "term_name", "p_value", "intersection")]
colnames(gem) <- c("GO.ID", "Description", "p.Val", "Genes")
gem$FDR <- gem$p.Val
gem$Phenotype = "+1"
gem <- gem[,c("GO.ID", "Description", "p.Val", "FDR", "Phenotype", "Genes")]
head(gem, 3)
write.table(gem, file = "gProfiler_gem_GOCC.txt", sep = "\t", quote = F, row.names = F)
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F, #T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "HP",
evcodes = TRUE,
highlight = TRUE)
# generate cytoscape input ----
gem <- gprofiler_results_oe$result[,c("term_id", "term_name", "p_value", "intersection")]
colnames(gem) <- c("GO.ID", "Description", "p.Val", "Genes")
gem$FDR <- gem$p.Val
gem$Phenotype = "+1"
gem <- gem[,c("GO.ID", "Description", "p.Val", "FDR", "Phenotype", "Genes")]
head(gem, 3)
write.table(gem, file = "gProfiler_gem_HP.txt", sep = "\t", quote = F, row.names = F)
gprofiler_results_oe <- gost(query = sig_de_genes$target,
organism = "rnorvegicus",
ordered_query = F, #T,
exclude_iea = F,
user_threshold = 0.05,
# max_set_size = 0,
correction_method = "fdr",
domain_scope = "annotated",
# custom_bg = all_de_genes$target,
sources = "GO:MF",
evcodes = TRUE,
highlight = TRUE)
# generate cytoscape input ----
gem <- gprofiler_results_oe$result[,c("term_id", "term_name", "p_value", "intersection")]
colnames(gem) <- c("GO.ID", "Description", "p.Val", "Genes")
gem$FDR <- gem$p.Val
gem$Phenotype = "+1"
gem <- gem[,c("GO.ID", "Description", "p.Val", "FDR", "Phenotype", "Genes")]
head(gem, 3)
write.table(gem, file = "gProfiler_gem_GOMF.txt", sep = "\t", quote = F, row.names = F)
library(limma)
library(Glimma)
library(edgeR)
library(biomaRt)
# library(dplyr)
# library(tidyr)
library(RColorBrewer)
library(DESeq2)
library(DEFormats)
library(ggplot2)
library(Rvisdiff)
library(org.Rn.eg.db)
library(goseq)
library(GenomicFeatures)
library(coriell)
# library(tidyverse)
# library(stringr)
library(EnhancedVolcano)
workdir <- '/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R'
setwd(workdir)
# samples <- read.csv("")
# counts_file <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/counts/h9c2_fc_frac_gene_rnaseq.txt"
# counts <- read.delim(counts_file, sep="\t", header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
# load in featurecounts data (from Rsubread.r file) ----
load("fc_basic.RData")
load("et.CABvsDMSO_toptags.RData")
mito_volcano = EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=antiox,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
widthConnectors = 0.2,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
# shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color_basic,
colAlpha = 0.3,
max.overlaps = Inf
) + theme(axis.text.x = element_text(colour="black"), axis.text.y = element_text(colour="black"))
caspase <- c('Casp3', 'Casp7', 'Casp9')
calpain <- c('Capn1', 'Capn3', 'Capn6')
mito <- c("Tp53", 'Bcl2l1', 'Bax', 'Sod2', 'Cycs')
ion_channels <- c("Scn2a", "Kcnh2", 'Kcnq5', 'Cacna1c')
select_genes <- c(caspase, calpain, mito) #, ion_channels)
antiox <- c('Sod3', 'Gsta1', 'Gsta3', 'Nqo1', 'Gss')
mito_volcano = EnhancedVolcano(et.CABvsDMSO_toptags,
lab = et.CABvsDMSO_toptags$Symbol,
selectLab=antiox,
x = 'logFC',
y = 'FDR',
title = "CAB vs DMSO",
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
widthConnectors = 0.2,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
labSize = 3,
# shapeCustom = keyvals.shape_basic,
# colCustom = keyvals.color_basic,
colAlpha = 0.3,
max.overlaps = Inf
) + theme(axis.text.x = element_text(colour="black"), axis.text.y = element_text(colour="black"))
mito_volcano
ggsave(file="antiox_volcano_sigcolor.tif", plot=mito_volcano, width=7, height=7)
ggsave(file="antiox_volcano_sigcolor.pdf", plot=mito_volcano, width=7, height=7)
shiny::runApp('~/Documents/smith_lab/dilution_calc/dilution_calc')
runApp('~/Documents/smith_lab/dilution_calc/dilution_calc')
runApp('~/Documents/smith_lab/dilution_calc/dilution_calc')
runApp('~/Documents/smith_lab/dilution_calc/dilution_calc')
rsconnect::setAccountInfo(name='cralbers', token='FE5DC4BA872CE120A6C2B77A7D16D107', secret='GhsnhtO7e0gB2ZfIiabYhJCfandcHIDM9PiTEiaJ')
runApp('~/Documents/smith_lab/dilution_calc/dilution_calc')
View(sig_de)
View(sig_de_genes)
make_volcano <- function(df, x, y, title){
upreg <- nrow(subset(df,logFC > 1 & FDR < 0.05))
downreg <- nrow(subset(df,logFC < (-1) & FDR < 0.05))
EnhancedVolcano(df,
lab = NA, #CABvsDMSO_df$Symbol,
selectLab=c("Nfe2l2"),
x = 'logFC',
y = 'FDR',
title = title,
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
) + theme(text=element_text(size=16,  family="Times")) +
geom_text(x=x, y=y, label= upreg, family='Times') +
geom_text(x=-x, y=y, label= downreg, family="Times") +
theme(axis.text.x = element_text(colour="black"), axis.text.y = element_text(colour="black"))
}
# len 2, 20; cab 8, 300
# save at w 700px, h 600px
make_volcano(et.CABvsDMSO_toptags, 8, 300, "CAB vs DMSO")
library(limma)
library(Glimma)
library(edgeR)
library(biomaRt)
# library(dplyr)
# library(tidyr)
library(RColorBrewer)
library(DESeq2)
library(DEFormats)
library(ggplot2)
library(Rvisdiff)
library(org.Rn.eg.db)
library(goseq)
library(GenomicFeatures)
library(coriell)
# library(tidyverse)
# library(stringr)
library(EnhancedVolcano)
make_volcano <- function(df, x, y, title){
upreg <- nrow(subset(df,logFC > 1 & FDR < 0.05))
downreg <- nrow(subset(df,logFC < (-1) & FDR < 0.05))
EnhancedVolcano(df,
lab = NA, #CABvsDMSO_df$Symbol,
selectLab=c("Nfe2l2"),
x = 'logFC',
y = 'FDR',
title = title,
pCutoff = 0.05,
# FCcutoff = 1,
drawConnectors = TRUE,
subtitle = "",
caption = bquote(~Log[2]~ "fold change cutoff, 1; p-value cutoff, 0.05"),
boxedLabels = TRUE,
) + theme(text=element_text(size=16,  family="Times")) +
geom_text(x=x, y=y, label= upreg, family='Times') +
geom_text(x=-x, y=y, label= downreg, family="Times") +
theme(axis.text.x = element_text(colour="black"), axis.text.y = element_text(colour="black"))
}
# len 2, 20; cab 8, 300
# save at w 700px, h 600px
make_volcano(et.CABvsDMSO_toptags, 8, 300, "CAB vs DMSO")
