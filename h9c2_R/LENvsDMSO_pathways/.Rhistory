if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Glimma")
library(limma)
library(edgeR)
library(limma)
library(Glimma)
library(edgeR)
library(biomaRt)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(DESeq2)
library(DEFormats)
library(ggplot2)
library(Rvisdiff)
workdir <- '/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R'
setwd(workdir)
counts_file <- "/Users/coraalbers/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/counts/h9c2_fc_frac_gene_rnaseq.txt"
counts <- read.delim(counts_file, sep="\t", header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
# load in featurecounts data (from Rsubread.r file)
load("fc_basic.RData")
x <- DGEList(counts=fc$counts, genes=fc$annotation[,c("GeneID","Length")])
# get condensed sample names and reassign to column names of DGE list
samplenames <- substring(colnames(x), 1, 6)
colnames(x) <- samplenames
# add dosing info to sample info table
group <- as.factor(rep(c("DMSO", "CAB", "LEN"), c(6, 6, 6)))
x$samples$group <- group
# remove gene version info from ensembl gene ids in DGEList object
geneid_withversion <- rownames(x)
split_characters <- function(x) {
# Use regexpr and substr to split characters at the first period
before_period <- character(length(x))
after_period <- character(length(x))
for (i in seq_along(x)) {
# Find the position of the first period
split_pos <- regexpr("\\.", x[i])
# Extract the part before the period
before_period[i] <- substr(x[i], 1, split_pos - 1)
# Extract the part after the period
after_period[i] <- substr(x[i], split_pos + 1, nchar(x[i]))
}
# Return as a list of two vectors
return(list(before_period = before_period, after_period = after_period))
}
result <- split_characters(geneid_withversion)
geneid_noversion <- result$before_period
rownames(x) <- geneid_noversion
head(rownames(x))
ensembl <- useEnsembl(biomart = "genes", dataset = "rnorvegicus_gene_ensembl", mirror="useast")
ensembl <- useEnsembl(biomart = "genes", dataset = "rnorvegicus_gene_ensembl", mirror="useast")
ensembl <- useEnsembl(biomart = "genes", dataset = "rnorvegicus_gene_ensembl", mirror="useast")
ensembl <- useEnsembl(biomart = "genes", dataset = "rnorvegicus_gene_ensembl", mirror="useast")
ensembl <- useEnsembl(biomart = "genes", dataset = "rnorvegicus_gene_ensembl", mirror="www")
library(clusterProfiler)
library(enrichplot)
library(pathview)
library(stringr)
library(topGO)
library(GOplot)
# SET THE DESIRED ORGANISM HERE
organism = "org.Rn.eg.db"
# BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
df = read.csv("CABvsDMSO.csv", header=TRUE)
# we want the log2 fold change
original_gene_list <- df$log2FoldChange
names(original_gene_list)
names(original_gene_list) <- df$X
# Convert gene IDs for gseKEGG function
# We will lose some genes here because not all IDs will be converted
ids<-bitr(names(original_gene_list), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb=org.Rn.eg.db)
# remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
dedup_ids <- ids[!duplicated(ids[c("ENSEMBL")]),]
# Create a new dataframe df2 which has only the genes which were successfully mapped using the bitr function above
df2 <- df[df$X %in% dedup_ids$ENSEMBL,]
# Create a new column in df2 with the corresponding ENTREZ IDs
df2$Y = dedup_ids$ENTREZID
# get ids of problematic entrezids that are duplicated or triplicated or quadrupilated hehe
n_occur <- data.frame(table(df2$Y))
df2_aggregated <- df2 %>%
group_by(Y) %>%
summarise(log2FoldChange = mean(log2FoldChange, na.rm = TRUE))
# Create a vector of the gene unuiverse
kegg_gene_list <- df2_aggregated$log2FoldChange
# Name vector with ENTREZ ids
names(kegg_gene_list) <- df2_aggregated$Y
# omit any NA values
kegg_gene_list<-na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
if(anyDuplicated(names(kegg_gene_list))) {
stop("There are duplicate ENTREZ IDs in the kegg_gene_list.")
}
kegg_organism = "rno"
kk2 <- gseKEGG(geneList     = kegg_gene_list,
organism     = kegg_organism,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none",
keyType       = "ncbi-geneid")
# Produce the native KEGG plot (PNG)
setwd("~/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/CABvsDMSO_pathways")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04210", species = kegg_organism, kegg.native = T)
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno05412", species = kegg_organism, kegg.native = T)
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno05412", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno05410", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04820", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04810", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04662", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
setwd("~/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/")
# SET THE DESIRED ORGANISM HERE
organism = "org.Rn.eg.db"
# BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
df = read.csv("LENvsDMSO.csv", header=TRUE)
# we want the log2 fold change
original_gene_list <- df$log2FoldChange
names(original_gene_list)
names(original_gene_list) <- df$X
# Convert gene IDs for gseKEGG function
# We will lose some genes here because not all IDs will be converted
ids<-bitr(names(original_gene_list), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb=org.Rn.eg.db)
# remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
dedup_ids <- ids[!duplicated(ids[c("ENSEMBL")]),]
# Create a new dataframe df2 which has only the genes which were successfully mapped using the bitr function above
df2 <- df[df$X %in% dedup_ids$ENSEMBL,]
# Create a new column in df2 with the corresponding ENTREZ IDs
df2$Y = dedup_ids$ENTREZID
# get ids of problematic entrezids that are duplicated or triplicated or quadrupilated hehe
n_occur <- data.frame(table(df2$Y))
df2_aggregated <- df2 %>%
group_by(Y) %>%
summarise(log2FoldChange = mean(log2FoldChange, na.rm = TRUE))
# Create a vector of the gene unuiverse
kegg_gene_list <- df2_aggregated$log2FoldChange
# Name vector with ENTREZ ids
names(kegg_gene_list) <- df2_aggregated$Y
# omit any NA values
kegg_gene_list<-na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
if(anyDuplicated(names(kegg_gene_list))) {
stop("There are duplicate ENTREZ IDs in the kegg_gene_list.")
}
kegg_organism = "rno"
kk2 <- gseKEGG(geneList     = kegg_gene_list,
organism     = kegg_organism,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none",
keyType       = "ncbi-geneid")
# Produce the native KEGG plot (PNG)
setwd("~/Documents/smith_lab/h9c2_RNA_seq/h9c2_R/LENvsDMSO_pathways")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno05412", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno05410", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04820", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04810", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04662", species = kegg_organism, kegg.native = T, out.suffix="CABvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04662", species = kegg_organism, kegg.native = T, out.suffix="LENvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04810", species = kegg_organism, kegg.native = T, out.suffix="LENvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno04820", species = kegg_organism, kegg.native = T, out.suffix="LENvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno05410", species = kegg_organism, kegg.native = T, out.suffix="LENvsDMSO_pathview")
dme <- pathview(gene.data=kegg_gene_list, pathway.id="rno05412", species = kegg_organism, kegg.native = T, out.suffix="LENvsDMSO_pathview")
ensembl <- useEnsembl(biomart = "genes", dataset = "rnorvegicus_gene_ensembl", mirror="www")
